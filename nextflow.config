// config for preprocessing workflow

params {

  // help message
  help = ''

  // input directory
  input_dir = ""

  // filetype fastq or bam
  filetype = 'fastq'

  // glob pattern for input files
  pattern = '*_R{1,2}.fastq.gz'

  // output directory
  output_dir = ""

  // unmix myco 'yes' or 'no'
  unmix_myco = 'yes'

  // principal species in each sample, assuming genus Mycobacterium, default null
  // otherwise takes 1 of 10 values: abscessus, africanum, avium, bovis, chelonae, chimaera, fortuitum, intracellulare, kansasii, tuberculosis
  species = 'null'

  // path to kraken2 database
  kraken_db = ""

  // path to bowtie2 index
  bowtie2_index = ""

}

profiles {
  singularity {

    singularity.enabled = 'true'
    singularity.autoMounts = 'true'

    // path to the singularity containers
    params.sif_dir = "${baseDir}/singularity"

    process {

      withName:preprocessing_checkBamValidity {
        container = "${params.sif_dir}/ppBedtools.sif"
      }

      withName:preprocessing_checkFqValidity {
        container = "${params.sif_dir}/ppFqtools.sif"
      }

      withName:preprocessing_bam2fastq {
        container = "${params.sif_dir}/ppBedtools.sif"
      }

      withName:preprocessing_countReads {
        container = "${params.sif_dir}/ppFqtools.sif"
      }

      withName:preprocessing_fastp {
        container = "${params.sif_dir}/ppFastp.sif"
      }

      withName:preprocessing_fastQC {
        container = "${params.sif_dir}/ppFastqc.sif"
      }

      withName:preprocessing_kraken2 {
        container = "${params.sif_dir}/ppKraken2.sif"
      }

      withName:preprocessing_mykrobe {
        container = "${params.sif_dir}/ppMykrobe.sif"
      }

      withName:preprocessing_bowtie2 {
        container = "${params.sif_dir}/ppBowtie2.sif"
      }

      withName:preprocessing_identifyBacterialContaminants {
        container = "${params.sif_dir}/ppPerljson.sif"
      }

      withName:preprocessing_mapToContamFa {
        container = "${params.sif_dir}/ppBwa.sif"
      }

      withName:preprocessing_reKraken {
        container = "${params.sif_dir}/ppKraken2.sif"
      }

      withName:preprocessing_reMykrobe {
        container = "${params.sif_dir}/ppMykrobe.sif"
      }

      withName:preprocessing_summarise {
        container = "${params.sif_dir}/ppPerljson.sif"
      }
    }
  }

  docker {

    docker.enabled = true
    fixOwnership = true
    runOptions = "-u \$(id -u):\$(id -g)"

    // define containers for each process
    process {

      withName:preprocessing_checkBamValidity {
        container = "ppbedtools:latest"
      }

      withName:preprocessing_checkFqValidity {
        container = "ppfqtools:latest"
      }

      withName:preprocessing_bam2fastq {
        container = "ppbedtools:latest"
      }

      withName:preprocessing_countReads {
        container = "ppfqtools:latest"
      }

      withName:preprocessing_fastp {
        container = "ppfastp:latest"
      }

      withName:preprocessing_fastQC {
        container = "ppfastqc:latest"
      }

      withName:preprocessing_kraken2 {
        container = "ppkraken2:latest"
      }

      withName:preprocessing_mykrobe {
        container = "ppmykrobe:latest"
      }

      withName:preprocessing_bowtie2 {
        container = "ppbowtie2:latest"
      }

      withName:preprocessing_identifyBacterialContaminants {
        container = "ppperljson:latest"
      }

      withName:preprocessing_mapToContamFa {
        container = "ppbwa:latest"
      }

      withName:preprocessing_reKraken {
        container = "ppkraken2:latest"
      }

      withName:preprocessing_reMykrobe {
        container = "ppmykrobe:latest"
      }

      withName:preprocessing_summarise {
        container = "ppperljson:latest"
      }
    }
  }
}

